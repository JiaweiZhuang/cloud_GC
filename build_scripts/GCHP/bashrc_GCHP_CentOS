# GEOS-Chem top-level directory
# Users need to change it if the code is placed in a different folder
export GC_CODE_DIR=/home/centos/GCHP/Code.v11-02_gchp

# ====================================
# --- Same as GEOS-Chem classic  ---
# ====================================

# package manager installs NC library to /usr by default
export NETCDF_HOME=/usr
export NETCDF_FORTRAN_HOME=/usr

export FC=gfortran
export CC=gcc
export CXX=g++

# Tell GEOS-Chem where to find netCDF library files
export GC_BIN=$NETCDF_HOME/bin
export GC_INCLUDE=$NETCDF_HOME/include
export GC_LIB=$NETCDF_HOME/lib

# NOTE: If netCDF-Fortran was loaded as a separate module, then
# also define these variables.  (Otherwise comment these out.)
export GC_F_BIN=$NETCDF_FORTRAN_HOME/bin
export GC_F_INCLUDE=$NETCDF_FORTRAN_HOME/include
export GC_F_LIB=$NETCDF_FORTRAN_HOME/lib

# ====================================
# --- GCHP-specific settings  ---
# ====================================

export OMPI_CC=$CC
export OMPI_CXX=$CXX
export OMPI_FC=$FC
export F77=$FC
export F90=$FC
export COMPILER=$FC # needed for gfortran?

# Locate mpicc, mpifort, mpirun
# If multiple MPI libraries are installed, PATH should be consistent with ESMF_COMM
export PATH=/usr/lib64/mpich-3.2/bin:$PATH

export ESMF_COMM=mpich2
export MPI_ROOT=$( dirname $( dirname $( which mpirun ) ) ) # PATH should be set already

# ====================================
# --- Dirty fixes for MAPL  ---
# ====================================

# MAPL cannot finding header and module files that are not in the default directories like /usr/include/. 
# Those are just quick and dirty fixes. Need better a solution.

# --- Fixes for Makefile ---
# Dependencies files *.d in MAPL are messed up in that
# 1. It directly specifies library headers like mpi.h as dependency, which should have been handled by MPI wrapper like mpicc.
# 2. It cannot find *.mod files that are in another directory.
# VPATH allows makefile to search additional directories, although is not a good practice.

export VPATH=/usr/include/mpich-3.2-x86_64:$VPATH # mpi.h, mpif.h, mpio.h
export VPATH=$GC_CODE_DIR/GCHP/Shared/MAPL_Base:$VPATH # mapl_*.mod
export VPATH=$GC_CODE_DIR/GCHP/ESMF/Linux/mod:$VPATH # esmf.mod

# Further note: *.d files are generated by $GC_CODE_DIR/GCHP/Shared/Config/bin/fdp during at compile time
# From Bob Yantosca: "fdp parses the source code and looks for all instances of USE or #include.  So it might not be able to distinguish between a *.h file that is in a source code directory from a *.h file (like mpif.h or netcdf.inc) that is meant to be linked from a library include path. "

# --- Fixed for header files ("#include <xxx.h>" statement) ---

export CPATH=/usr/include/mpich-3.2-x86_64:$CPATH # mpi.h, mpif.h, mpio.h
export CPATH=$GC_CODE_DIR/GCHP/Shared/MAPL_Base:$CPATH # MAPL_Generic.h
export CPATH=$GC_CODE_DIR/GCHP/Shared/GFDL_fms/shared/include:$CPATH # fms_platform.h
export CPATH=$GC_CODE_DIR/GCHP/gchp_standard/CodeDir/GCHP/ESMF/Linux/include:$CPATH # ESMF_ErrReturnCodes.inc

# --- Fixes for module files ("USE xxx" statement) ---

# There is no easy way to globally configure the search path for "USE xxx" statement in F90
# CPATH is only for C-like statement "#include <xxx.h>", see https://stackoverflow.com/questions/23991664/gfortran-include-path-is-there-an-alternative-to-passing-multiple-i-options

# Linking library modules seems a fine practice 
sudo ln -sf /usr/lib64/gfortran/modules/netcdf.mod /usr/include/

# DragCoefficients.F90 contains "use MAPL_ConstantsMod" statement but it is located in another folder
# Linking MAPL modules to /usr/include/ is a horrible fix. Any better workaround?
sudo ln -sf $GC_CODE_DIR/GCHP/Shared/MAPL_Base/mapl_constantsmod.mod /usr/include/


